üéØ Objetivo
Crie um sistema de rastreamento de tr√°fego pago chamado M√©tricaClick, semelhante ao RedTrack. Ele deve rastrear cliques de campanhas, armazenar informa√ß√µes no navegador do usu√°rio (cookies e sessionStorage), registrar visualiza√ß√µes de p√°ginas e permitir atribui√ß√£o futura de vendas por click ID.

üîß Funcionalidades principais do frontend (JavaScript)
Implemente um script JavaScript que ser√° inclu√≠do em p√°ginas externas como este:

html
Copiar
Editar
<script src="https://metrica-click.replit.app/mc.js?attribution=lastpaid&cookiedomain=automatikblog.com&cookieduration=90&defaultcampaignid=683f45642498fc6fe758357f&regviewonce=false"></script>
Esse script deve:

Ler par√¢metros da URL, como:

cmpid ‚Üí ID da campanha

mcid ‚Üí clickid (opcional)

tsource ‚Üí fonte do tr√°fego (opcional)

_fbp e _fbc dos cookies (Meta Ads)

Gerenciar cookies e sessionStorage:

mcclickid-store ‚Üí guarda o click ID geral (por at√© 90 dias)

mccid-paid ‚Üí guarda o click ID se for pago

sessionStorage.mcclickid ‚Üí click ID da sess√£o

Aplicar modelo de atribui√ß√£o com base em attribution:

"lastpaid" (padr√£o)

"firstclick"

"lastclick"

"firstpaid"

Solicitar o click ID do backend (se n√£o tiver mcid na URL):

Via GET https://metrica-click.replit.app/track/{campaignID}?format=json&referrer=...&...

Deve receber: { "clickid": "mc_1234567890" }

Registrar a visualiza√ß√£o da p√°gina:

Via GET https://metrica-click.replit.app/view?clickid={clickid}&referrer={ref}

üß† O que o script deve fazer no fluxo:
Captura os par√¢metros da URL e cookies do navegador.

Decide qual click ID usar, de acordo com o modelo de atribui√ß√£o.

Armazena esse click ID em cookie e sessionStorage.

Chama o endpoint /view para registrar uma visualiza√ß√£o.

Se n√£o houver mcid na URL, consulta o endpoint /track/{campaignID} para gerar um novo click ID.

üì° Backend ‚Äì Endpoints Requeridos
Voc√™ deve criar dois endpoints no backend do Replit:

GET /track/:campaignID
Objetivo:
Gerar ou retornar um click ID para uma campanha.

Par√¢metros:
:campaignID ‚Üí o ID da campanha (ex: abc123)

Querystring:

referrer (opcional)

_fbp, _fbc (opcional, do Meta Ads)

format=json (sempre)

Resposta esperada (formato JSON):
json
Copiar
Editar
{
  "clickid": "mc_abc123_1699202392837"
}
O que o servidor deve fazer:
Gerar um ID √∫nico (pode ser mc_{campaignID}_{timestamp})

Salvar esse dado em mem√≥ria (para o MVP pode ser um array ou objeto local)

Retornar o JSON com o clickid

GET /view
Objetivo:
Registrar que um usu√°rio visualizou a p√°gina com determinado clickid.

Par√¢metros:
clickid (obrigat√≥rio)

referrer (opcional)

O que o servidor deve fazer:
Registrar um log com clickid, referrer, timestamp

Salvar (em mem√≥ria ou em arquivo no Replit)

Pode simplesmente retornar 200 OK

üß™ Exemplos de uso
1. Acesso com clique pago:
ruby
Copiar
Editar
https://automatikblog.com/?cmpid=abc123&_fbc=123&_fbp=456
Fluxo:

script detecta cmpid

consulta /track/abc123

recebe clickid

salva em mcclickid-store, sessionStorage, e talvez mccid-paid

registra visualiza√ß√£o em /view

2. Acesso com clickid j√° na URL:
ruby
Copiar
Editar
https://automatikblog.com/?mcid=mc_abc123_1699...
Fluxo:

script l√™ mcid da URL

salva direto em cookie/session

registra visualiza√ß√£o